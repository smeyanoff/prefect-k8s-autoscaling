---
### https://docs.prefect.io/latest/guides/deployment/kubernetes/#define-a-prefect-deployment
### https://docs.prefect.io/latest/guides/prefect-deploy/#creating-work-pool-based-deployments-with-prefectyaml
### https://prefecthq.github.io/prefect-docker/deployments/steps/#prefect_docker.deployments.steps.BuildDockerImageResult
### https://docs.prefect.io/latest/guides/prefect-deploy/#templating-options

# Generic metadata about this project
name: '{{ $DEPLOYMENT_NAME }}'
prefect-version: '{{ $PREFECT_VERSION }}'
# build section allows you to manage and build docker images
build:
  - prefect_docker.deployments.steps.build_docker_image:
      id: build-image
      image_name: '{{ $REGISTRY }}/{{ $DEPLOYMENT_NAME }}'
      tag: '{{ $DEPLOYMENT_TAG }}'
      dockerfile: Dockerfile
push:
  - prefect_docker.deployments.steps.push_docker_image:
      image_name: '{{ build-image.image_name }}'
      tag: '{{ build-image.tag }}'
pull:
  - prefect.deployments.steps.set_working_directory:
      directory: /opt/prefect
# the definitions section allows you to define reusable components for your deployments
definitions:
  tags: &common_tags [python, '{{ $PREFECT_WORK_POOL_NAME }}']
  work_pool: &common_work_pool
    name: '{{ $PREFECT_WORK_POOL_NAME }}'
    work_queue_name: default  # high_load low_load
    job_variables:
      image: '{{ build-image.image }}'
      namespace: prefect
      env:
        DEPLOYMENT_NAME: '{{ $DEPLOYMENT_NAME }}'
        DEPLOYMENT_TAG: '{{ build-image.tag }}'
        PREFECT_WORK_POOL_NAME: '{{ $PREFECT_WORK_POOL_NAME }}'
      resources:
        requests:
          memory: 500Mi
          cpu: '0.5'
        limits:
          memory: 500Mi
          cpu: '0.5'
      tolerations:
        - key: role
          operator: Equal
          value: python-app  # python-app-hl
          effect: NoSchedule
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: role
                    operator: In
                    values: [python-app]  # python-app-hl

  ## параметры передаваемые во flow
  # parameters: &parameters
  #   prefect_deployment_name: '{{ $DEPLOYMENT_NAME }}'
  #   script_path: /application/{{ $SPARK_FILE_NAME }}
  #   config_path: /application/spark_application.yaml
  #   object_name: '{{ $PREFECT_WORK_POOL_NAME }}/{{ $DEPLOYMENT_NAME }}/{{ build-image.tag}}.py'
# the deployments section allows you to provide configuration for deploying flows
deployments:
  - name: '{{ $DEPLOYMENT_NAME }}'
    version: '{{ build-image.tag }}'
    description:
    tags: *common_tags
    work_pool: *common_work_pool
      # flow-specific fields
    entrypoint: src/flows/flow.py:python_prefect_flow
    job_variables:
    # parameters: *parameters
    # schedule:
    #   type: cron
    #   cron: 0 0 1 * *
    #   timezone: Europe/Moscow
    #   active: '{{ $SCHEDULE_IS_ACTIVE }}'  # SCHEDULE_IS_ACTIVE true в ветке main false в test
